// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  level         Int       @default(1)
  xp            Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  habits          Habit[]
  habitCompletions HabitCompletion[]
  userBadges      UserBadge[]
  challenges      Challenge[]
}

model Habit {
  id          String    @id @default(cuid())
  name        String
  description String?
  frequency   String    // daily, weekly, monthly
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isArchived  Boolean   @default(false)
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions HabitCompletion[]

  @@index([userId])
}

model HabitCompletion {
  id        String   @id @default(cuid())
  habitId   String
  userId    String
  completedAt DateTime @default(now())
  xpEarned  Int      @default(10)

  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([userId])
}

model Badge {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  imageUrl    String
  requirement String    // JSON string containing badge requirements
  xpBonus     Int      @default(0)
  createdAt   DateTime  @default(now())

  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model Challenge {
  id          String    @id @default(cuid())
  title       String
  description String
  xpReward    Int
  difficulty  String    // easy, medium, hard
  duration    Int      // in days
  userId      String
  status      String    // active, completed, failed
  startDate   DateTime  @default(now())
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aiGenerated Boolean   @default(false)
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
