generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  level            Int               @default(1)
  xp               Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  password         String?
  accounts         Account[]
  habits           Habit[]
  habitCompletions HabitCompletion[]
  sessions         Session[]
  userBadges       UserBadge[]
  following        UserFollower[]    @relation("Follower")
  followers        UserFollower[]    @relation("Following")
}

model Habit {
  id          String            @id @default(cuid())
  name        String
  description String?
  frequency   Json
  difficulty  String            @default("easy")
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isArchived  Boolean           @default(false)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions HabitCompletion[]

  @@index([userId])
}

model HabitCompletion {
  id          String   @id @default(cuid())
  habitId     String
  userId      String
  completedAt DateTime @default(now())
  xpEarned    Int
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([userId])
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  imageUrl    String
  requirement String
  xpBonus     Int         @default(0)
  createdAt   DateTime    @default(now())
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model UserFollower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
